{"version":3,"file":"TextureUtils.js","sourceRoot":"","sources":["../../src/three-components/TextureUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {BackSide, BoxBufferGeometry, Cache, CubeCamera, DataTextureLoader, EventDispatcher, GammaEncoding, LinearToneMapping, Mesh, NearestFilter, RGBEEncoding, RGBEFormat, Scene, ShaderMaterial, Texture, TextureLoader, UnsignedByteType, WebGLRenderer, WebGLRenderTarget, WebGLRenderTargetCube} from 'three';\nimport {PMREMCubeUVPacker} from 'three/examples/jsm/pmrem/PMREMCubeUVPacker.js';\nimport {PMREMGenerator} from 'three/examples/jsm/pmrem/PMREMGenerator.js';\n\nimport {CubemapGenerator} from '../third_party/three/EquirectangularToCubeGenerator.js';\nimport {RGBELoader} from '../third_party/three/RGBELoader.js';\nimport {ProgressTracker} from '../utilities/progress-tracker.js';\n\nimport EnvironmentMapGenerator from './EnvironmentMapGenerator.js';\n\nexport interface EnvironmentMapAndSkybox {\n  environmentMap: WebGLRenderTarget;\n  skybox: WebGLRenderTargetCube|null;\n}\n\nexport interface EnvironmentGenerationConfig {\n  progressTracker?: ProgressTracker;\n}\n\n// Enable three's loader cache so we don't create redundant\n// Image objects to decode images fetched over the network.\nCache.enabled = true;\n\nconst HDR_FILE_RE = /\\.hdr$/;\nconst ldrLoader = new TextureLoader();\nconst hdrLoader = new RGBELoader();\n\nconst $environmentMapCache = Symbol('environmentMapCache');\nconst $skyboxCache = Symbol('skyboxCache');\nconst $generatedEnvironmentMap = Symbol('generatedEnvironmentMap');\n\nconst $loadSkyboxFromUrl = Symbol('loadSkyboxFromUrl');\nconst $loadEnvironmentMapFromUrl = Symbol('loadEnvironmentMapFromUrl');\nconst $loadEnvironmentMapFromSkyboxUrl =\n    Symbol('loadEnvironmentMapFromSkyboxUrl');\nconst $loadGeneratedEnvironmentMap = Symbol('loadGeneratedEnvironmentMap');\n\nexport interface TextureUtilsConfig {\n  cubemapSize?: number;\n  pmremSamples?: number;\n}\n\nconst defaultConfig: TextureUtilsConfig = {\n  cubemapSize: 1024,\n};\n\n// Attach a `userData` object for arbitrary data on textures that\n// originate from TextureUtils, similar to Object3D's userData,\n// for help debugging, providing metadata for tests, and semantically\n// describe the type of texture within the context of this application.\nconst userData = {\n  url: null,\n  // 'Equirectangular', 'Cube', 'PMREM'\n  mapping: null,\n};\n\nexport default class TextureUtils extends EventDispatcher {\n  private config: TextureUtilsConfig;\n  private renderer: WebGLRenderer;\n\n  private[$generatedEnvironmentMap]: WebGLRenderTarget|null = null;\n\n  private[$environmentMapCache] = new Map<string, Promise<WebGLRenderTarget>>();\n  private[$skyboxCache] = new Map<string, Promise<WebGLRenderTargetCube>>();\n\n  constructor(renderer: WebGLRenderer, config: TextureUtilsConfig = {}) {\n    super();\n    this.config = {...defaultConfig, ...config};\n    this.renderer = renderer;\n  }\n\n  equirectangularToCubemap(texture: Texture): WebGLRenderTargetCube {\n    const generator = new CubemapGenerator(this.renderer);\n\n    let target = generator.fromEquirectangular(texture, {\n      resolution: this.config.cubemapSize,\n    });\n\n    (target.texture as any).userData = {\n      ...userData,\n      ...({\n        url: (texture as any).userData ? (texture as any).userData.url : null,\n        mapping: 'Cube',\n      })\n    };\n\n    return target;\n  }\n\n  async load(\n      url: string, progressCallback: (progress: number) => void = () => {}):\n      Promise<Texture> {\n    try {\n      const isHDR: boolean = HDR_FILE_RE.test(url);\n      const loader: DataTextureLoader = isHDR ? hdrLoader : ldrLoader;\n      const texture: Texture = await new Promise<Texture>(\n          (resolve, reject) => loader.load(\n              url, resolve, (event: {loaded: number, total: number}) => {\n                progressCallback(event.loaded / event.total * 0.9);\n              }, reject));\n\n      progressCallback(1.0);\n\n      (texture as any).userData = {\n        ...userData,\n        ...({\n          url: url,\n          mapping: 'Equirectangular',\n        })\n      };\n\n      if (isHDR) {\n        texture.encoding = RGBEEncoding;\n        texture.minFilter = NearestFilter;\n        texture.magFilter = NearestFilter;\n        texture.flipY = true;\n      } else {\n        texture.encoding = GammaEncoding;\n      }\n\n      return texture;\n\n    } finally {\n      if (progressCallback) {\n        progressCallback(1);\n      }\n    }\n  }\n\n  async loadEquirectAsCubeMap(\n      url: string, progressCallback: (progress: number) => void = () => {}):\n      Promise<WebGLRenderTargetCube> {\n    let equirect = null;\n\n    try {\n      equirect = await this.load(url, progressCallback);\n      return await this.equirectangularToCubemap(equirect);\n    } finally {\n      if (equirect != null) {\n        (equirect as any).dispose();\n      }\n    }\n  }\n\n  /**\n   * Returns a { skybox, environmentMap } object with the targets/textures\n   * accordingly. `skybox` is a WebGLRenderCubeTarget, and `environmentMap`\n   * is a Texture from a WebGLRenderCubeTarget.\n   */\n  async generateEnvironmentMapAndSkybox(\n      skyboxUrl: string|null = null, environmentMapUrl: string|null = null,\n      options: EnvironmentGenerationConfig = {}):\n      Promise<EnvironmentMapAndSkybox> {\n    const {progressTracker} = options;\n    const updateGenerationProgress =\n        progressTracker != null ? progressTracker.beginActivity() : () => {};\n\n    try {\n      let skyboxLoads: Promise<WebGLRenderTargetCube|null> =\n          Promise.resolve(null);\n      let environmentMapLoads: Promise<WebGLRenderTarget>;\n\n      // If we have a skybox URL, attempt to load it as a cubemap\n      if (!!skyboxUrl) {\n        skyboxLoads = this[$loadSkyboxFromUrl](skyboxUrl, progressTracker);\n      }\n\n      if (!!environmentMapUrl) {\n        // We have an available environment map URL\n        environmentMapLoads = this[$loadEnvironmentMapFromUrl](\n            environmentMapUrl, progressTracker);\n      } else if (!!skyboxUrl) {\n        // Fallback to deriving the environment map from an available skybox\n        environmentMapLoads =\n            this[$loadEnvironmentMapFromSkyboxUrl](skyboxUrl, progressTracker);\n      } else {\n        // Fallback to generating the environment map\n        environmentMapLoads = this[$loadGeneratedEnvironmentMap]();\n      }\n\n      const [environmentMap, skybox] =\n          await Promise.all([environmentMapLoads, skyboxLoads]);\n\n      return {environmentMap, skybox};\n    } finally {\n      updateGenerationProgress(1.0);\n    }\n  }\n\n  /**\n   * Loads a WebGLRenderTargetCube from a given URL. The render target in this\n   * case will be assumed to be used as a skybox.\n   */\n  private[$loadSkyboxFromUrl](url: string, progressTracker?: ProgressTracker):\n      Promise<WebGLRenderTargetCube> {\n    if (!this[$skyboxCache].has(url)) {\n      const progressCallback =\n          progressTracker ? progressTracker.beginActivity() : () => {};\n      this[$skyboxCache].set(\n          url, this.loadEquirectAsCubeMap(url, progressCallback));\n    }\n\n    return this[$skyboxCache].get(url)!;\n  }\n\n  /**\n   * Loads a WebGLRenderTarget from a given URL. The render target in this\n   * case will be assumed to be used as an environment map.\n   */\n  private[$loadEnvironmentMapFromUrl](\n      url: string,\n      progressTracker?: ProgressTracker): Promise<WebGLRenderTarget> {\n    if (!this[$environmentMapCache].has(url)) {\n      const progressCallback =\n          progressTracker ? progressTracker.beginActivity() : () => {};\n      const environmentMapLoads =\n          this.loadEquirectAsCubeMap(url, progressCallback)\n              .then(interstitialEnvironmentMap => {\n                const environmentMap =\n                    this.pmremPass(interstitialEnvironmentMap.texture);\n                // In this case, we don't care about the interstitial\n                // environment map because it will never be used for anything,\n                // so dispose of it right away:\n                interstitialEnvironmentMap.dispose();\n                return environmentMap;\n              });\n\n      this[$environmentMapCache].set(url, environmentMapLoads);\n    }\n\n    return this[$environmentMapCache].get(url)!;\n  }\n\n  /**\n   * Loads a skybox from a given URL, then PMREM is applied to the\n   * skybox texture and the resulting WebGLRenderTarget is returned,\n   * with the assumption that it will be used as an environment map.\n   */\n  private[$loadEnvironmentMapFromSkyboxUrl](\n      url: string,\n      progressTracker?: ProgressTracker): Promise<WebGLRenderTarget> {\n    if (!this[$environmentMapCache].has(url)) {\n      const skyboxLoads = this[$loadSkyboxFromUrl](url, progressTracker);\n      const environmentMapLoads =\n          skyboxLoads.then(skybox => this.pmremPass(skybox.texture));\n\n      this[$environmentMapCache].set(url, environmentMapLoads);\n    }\n\n    return this[$environmentMapCache].get(url)!;\n  }\n\n  /**\n   * Loads a dynamically generated environment map.\n   */\n  private[$loadGeneratedEnvironmentMap](): Promise<WebGLRenderTarget> {\n    if (this[$generatedEnvironmentMap] == null) {\n      const environmentMapGenerator =\n          new EnvironmentMapGenerator(this.renderer);\n      const interstitialEnvironmentMap = environmentMapGenerator.generate();\n\n      this.gaussianBlur(interstitialEnvironmentMap);\n\n      this[$generatedEnvironmentMap] =\n          this.pmremPass(interstitialEnvironmentMap.texture);\n\n      // We should only ever generate this map once, and we will not be using\n      // the environment map as a skybox, so go ahead and dispose of all\n      // interstitial artifacts:\n      interstitialEnvironmentMap.dispose();\n      environmentMapGenerator.dispose();\n    }\n\n    return Promise.resolve(this[$generatedEnvironmentMap]!);\n  }\n\n  gaussianBlur(\n      cubeTarget: WebGLRenderTargetCube,\n      standardDeviationRadians: number = 0.04) {\n    const blurScene = new Scene();\n\n    const geometry = new BoxBufferGeometry();\n    geometry.removeAttribute('uv');\n\n    const cubeResolution = cubeTarget.width;\n    const standardDeviations = 3;\n    const n = Math.ceil(\n        standardDeviations * standardDeviationRadians * cubeResolution * 2 /\n        Math.PI);\n    const inverseIntegral =\n        standardDeviations / ((n - 1) * Math.sqrt(2 * Math.PI));\n    let weights = [];\n    for (let i = 0; i < n; ++i) {\n      const x = standardDeviations * i / (n - 1);\n      weights.push(inverseIntegral * Math.exp(-x * x / 2));\n    }\n\n    const blurMaterial = new ShaderMaterial({\n      uniforms: {\n        tCube: {value: null},\n        latitudinal: {value: false},\n        weights: {value: weights},\n        dTheta: {value: standardDeviationRadians * standardDeviations / (n - 1)}\n      },\n      vertexShader: `\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n  vWorldDirection = transformDirection( position, modelMatrix );\n  #include <begin_vertex>\n  #include <project_vertex>\n  gl_Position.z = gl_Position.w;\n}\n      `,\n      fragmentShader: `\nconst int n = ${n};\nuniform float weights[${n}];\nuniform samplerCube tCube;\nuniform bool latitudinal;\nuniform float dTheta;\nvarying vec3 vWorldDirection;\nvoid main() {\n  vec4 texColor = vec4(0.0);\n  for (int i = 0; i < n; i++) {\n    for (int dir = -1; dir < 2; dir += 2) {\n      if (i == 0 && dir == 1)\n        continue;\n      vec3 sampleDirection = vWorldDirection;\n      float xz = length(sampleDirection.xz);\n      float weight = weights[i];\n      if (latitudinal) {\n        float diTheta = dTheta * float(dir * i) / xz;\n        mat2 R = mat2(cos(diTheta), sin(diTheta), -sin(diTheta), cos(diTheta));\n        sampleDirection.xz = R * sampleDirection.xz;\n        texColor += weight * RGBEToLinear(textureCube(tCube, sampleDirection));\n      } else {\n        float diTheta = dTheta * float(dir * i);\n        mat2 R = mat2(cos(diTheta), sin(diTheta), -sin(diTheta), cos(diTheta));\n        vec2 xzY = R * vec2(xz, sampleDirection.y);\n        sampleDirection.xz *= xzY.x / xz;\n        sampleDirection.y = xzY.y;\n        texColor += weight * RGBEToLinear(textureCube(tCube, sampleDirection));\n      }\n    }\n  }\n  gl_FragColor = linearToOutputTexel(texColor);\n}\n      `,\n      side: BackSide,\n      depthTest: false,\n      depthWrite: false\n    });\n\n    blurScene.add(new Mesh(geometry, blurMaterial));\n\n    const blurCamera = new CubeCamera(0.1, 100, cubeResolution);\n    const tempTarget = blurCamera.renderTarget;\n    tempTarget.texture.type = UnsignedByteType;\n    tempTarget.texture.format = RGBEFormat;\n    tempTarget.texture.encoding = RGBEEncoding;\n    tempTarget.texture.magFilter = NearestFilter;\n    tempTarget.texture.minFilter = NearestFilter;\n    tempTarget.texture.generateMipmaps = false;\n\n    const gammaOutput = this.renderer.gammaOutput;\n    const toneMapping = this.renderer.toneMapping;\n    const toneMappingExposure = this.renderer.toneMappingExposure;\n\n    this.renderer.toneMapping = LinearToneMapping;\n    this.renderer.toneMappingExposure = 1.0;\n    this.renderer.gammaOutput = false;\n\n    blurMaterial.uniforms.latitudinal.value = false;\n    blurMaterial.uniforms.tCube.value = cubeTarget.texture;\n    blurCamera.update(this.renderer, blurScene);\n\n    blurMaterial.uniforms.latitudinal.value = true;\n    blurMaterial.uniforms.tCube.value = tempTarget.texture;\n    blurCamera.renderTarget = cubeTarget;\n    blurCamera.update(this.renderer, blurScene);\n\n    this.renderer.toneMapping = toneMapping;\n    this.renderer.toneMappingExposure = toneMappingExposure;\n    this.renderer.gammaOutput = gammaOutput;\n\n    tempTarget.dispose();\n  }\n\n  /**\n   * Takes a cube-ish (@see equirectangularToCubemap) texture and\n   * returns a texture of the prefiltered mipmapped radiance environment map\n   * to be used as environment maps in models.\n   */\n  pmremPass(texture: Texture, samples?: number, size?: number):\n      WebGLRenderTarget {\n    const generator = new PMREMGenerator(texture, samples, size);\n    generator.update(this.renderer);\n\n    const packer = new PMREMCubeUVPacker(generator.cubeLods);\n    packer.update(this.renderer);\n\n    const renderTarget = packer.CubeUVRenderTarget;\n\n    generator.dispose();\n    packer.dispose();\n\n    (renderTarget.texture as any).userData = {\n      ...userData,\n      ...({\n        url: (texture as any).userData ? (texture as any).userData.url : null,\n        mapping: 'PMREM',\n      })\n    };\n\n    return renderTarget;\n  }\n\n  async dispose() {\n    for (const environmentMapLoads of this[$environmentMapCache].values()) {\n      const environmentMap = await environmentMapLoads;\n      if (environmentMap != null) {\n        environmentMap.dispose();\n      }\n    }\n\n    this[$environmentMapCache].clear();\n\n    for (const skyboxLoads of this[$skyboxCache].values()) {\n      const skybox = await skyboxLoads;\n      if (skybox != null) {\n        skybox.dispose();\n      }\n    }\n\n    this[$skyboxCache].clear();\n\n    if (this[$generatedEnvironmentMap] != null) {\n      this[$generatedEnvironmentMap]!.dispose();\n      this[$generatedEnvironmentMap] = null;\n    }\n  }\n}\n"]}